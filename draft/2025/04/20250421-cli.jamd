「仕様理解」を行ったあと、「実装改修」に着手する。

# 仕様理解

`docs/index.md`と `docs/breakdown/index.ja.md` から参照されるすべての仕様書を読み込んで。 Schema仕様の理解は不要。

# ユースケースのテスト
まず、このアプリケーションをCLIインストールして使う場合をユースケースとして想定する。
ユースケースでは、 `deno install` を用いてインストールする。インストールは README.md を読むこと。
CLIコマンドのオプションが取りうる値は、 docs/brakdown/options.ja.md を読むこと。

ユースケースを想定して、以下の実装改修を行う。

# 実装改修

「仕様理解」を行った上で、以下の処理を行う。

## 既存実装の要否判定
- BreakdownConfig, BreakdownParams, BreakdownPrompt をベースにしたアプリケーションである。
- 設定やパラメータ解析、Markdownファイル内容の解析は上記３ライブラリで実施している。
-　このアプリケーションでの独自実装は不要である。

そのうえで、
- 仕様書に記載のない、過剰な実装を削除する
- 仕様に対して、曖昧・過剰なテストは削除する

## 手順

## examples の動作確認実行
1. `scripts/local_ci.sh` を実行する
  - すべてpassしたら、メインコードは変更しない
1. `scripts/run_examples.sh` を実行する
2. エラーが起きたら、最初のエラーについて、以下の a or b を判定する
  a. examples/* の記述エラー
  b. メインコードのエラー
3. aの場合は examples/* のファイルを修正する。
   bの場合は、「メインコード実装改修の実行」へ進む。

## メインコード実装改修の実行
1. `scripts/local_ci.sh` を実行する
2. エラーに対し、 CursorRules, `docs/breakdown/testing.md` を理解する
3. テストにデバッグログを追加する。エラー箇所のテストコード前後にBreakdownLoggerの出力を追加する。
4. 再び `scripts/local_ci.sh` を実行する
5. 不明点や曖昧さがあれば、`docs/` を起点に仕様書を探し、読んで、解決策を導く。
6. 最初の1に戻る
