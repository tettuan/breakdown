# 全域性原則に基づく型定義仕様書
#
# この文書は totality.ja.md の「取りうる状態を明示的に定義し、それ以外を排除する」
# アプローチに基づいて、型の制約を表現します。
#
# ## 基本的な記述パターン
#
# ### パターン1: Result型（全域性原則の基本パターン）
# ```yaml
# TypeConstructorResult:
#   Success:
#     - data: ValidType
#   Failure:
#     - error: ErrorType
# ```
# この記述は TypeScript の以下と同等です：
# type TypeConstructorResult = Result<ValidType, ErrorType>
#
# ### パターン2: 制約型（受け入れ可能型と受け入れ不可型の分離）
# ```yaml
# TypeName:
#   受け入れ可能型:
#     - SpecificType.Property
#   受け入れ不可型:
#     - 値なし
# ```
#
# ### パターン3: Discriminated Union型
# ```yaml
# ErrorType:
#   VariantA:
#     - PropertyX
#     - PropertyY
#   VariantB:
#     - PropertyZ
# ```
#
# ---

# 共通エラー型定義
ValidationError:
  EmptyInput:
    - message: string
  InvalidFormat:
    - value: string
    - pattern: string
    - message: string
  TooLong:
    - value: string
    - maxLength: number
    - message: string
  InvalidPath:
    - message: string

# 基本ドメイン型定義（Result型を使用）
DirectiveTypeResult:
  Success:
    - data: DirectiveType
  Failure:
    - error: ValidationError

DirectiveType:
  受け入れ可能型:
    - TwoParams_Result.directiveType # バリデーション済み値のみ受け入れ
  受け入れ不可型:
    - 値なし # 未検証文字列は受け入れない

LayerTypeResult:
  Success:
    - data: LayerType
  Failure:
    - error: ValidationError

LayerType:
  受け入れ可能型:
    - TwoParams_Result.layerType # バリデーション済み値のみ受け入れ
  受け入れ不可型:
    - 値なし # 未検証文字列は受け入れない

ConfigProfileResult:
  Success:
    - data: ConfigProfile
  Failure:
    - error: ConfigProfileError

ConfigProfile:
  受け入れ可能型:
    - string # 検証済み設定プロファイル名（例: "production", "staging"）
  受け入れ不可型:
    - 値なし # 未検証文字列、null、undefined等は受け入れない

ConfigProfileError:
  EmptyInput:
    - message: string
  InvalidFormat:
    - value: string
    - pattern: string
    - message: string
  TooLong:
    - value: string
    - maxLength: number
    - message: string

PromptPathResult:
  Success:
    - data: PromptPath
  Failure:
    - error: InvalidPathError

PromptPath:
  受け入れ可能型:
    - string # 検証済みテンプレートパス
  受け入れ不可型:
    - 値なし # 未検証文字列は受け入れない

InvalidPathError:
  InvalidPath:
    - message: string
# Breakdown パラメータ処理型定義
BreakdownParamsResult:
  TwoParamsResult:
    - directiveType: string # DirectiveType の元値
    - layerType: string # LayerType の元値
    - options: Options
  OneParamsResult:
    - options: Options
  ZeroParamsResult:
    - options: Options

Options: TwoParamsResult.Options | OneParamsResult.Options | ZeroParamsResult.Options

# バリデーション設定型（TwoParamsCustomConfigの一部）
TwoParamsCustomConfig:
  TwoParamsDirectivePattern:
    - pattern: RegExp # 正規表現パターン
    - errorMessage: string # エラーメッセージ
  TwoParamsLayerTypePattern:
    - pattern: RegExp # 正規表現パターン
    - errorMessage: string # エラーメッセージ
# Prompt 管理型定義（Result型を使用）
PromptManagerResult:
  Success:
    - data: PromptResult
  Failure:
    - error: PromptError

PromptResult:
  - content: string # 生成されたプロンプト内容
  - metadata: PromptMetadata # メタデータ

PromptMetadata:
  - template: string # テンプレートパス
  - variables: Record<string, string> # 使用された変数
  - timestamp: Date # 生成時刻

PromptError:
  TemplateNotFound:
    - path: string
  InvalidVariables:
    - details: string[]
  ValidationError:
    - message: string

# Prompt 変数型定義（Duck Typing パターン）
PromptVariables:
  # Duck Typing: toRecord()メソッドを持つ任意の型
  - toRecord(): Record<string, string>

# 具体的なPromptVariables実装型
StandardVariable:
  - name: StandardVariableName
  - value: string

StandardVariableName:
  受け入れ可能型:
    - "input_text_file"
    - "destination_path"
  受け入れ不可型:
    - 値なし

FilePathVariable:
  - name: FilePathVariableName
  - value: string # FilePath型の文字列表現

FilePathVariableName:
  受け入れ可能型:
    - "schema_file"
  受け入れ不可型:
    - 値なし

StdinVariable:
  - name: StdinVariableName
  - value: string

StdinVariableName:
  受け入れ可能型:
    - "input_text"
  受け入れ不可型:
    - 値なし

UserVariable:
  - name: string # ユーザー定義変数名（--uv-*形式）
  - value: string # ユーザー定義変数値

# 設定管理型定義
DefaultApplicationConfig:
# default_application_config.jsonの内容を表す型
# 具体的な構造は設定ファイルに依存

# ファイルパス型定義（基本型）
FilePath:
  受け入れ可能型:
    - string # 有効なファイルパス文字列
  受け入れ不可型:
    - 値なし # 空文字列、null、undefined等は受け入れない

# 全域性原則に基づくSmart Constructorパターンの実装指針:
# 1. 全ての値オブジェクトはprivate constructorを持つ
# 2. static createメソッドでResult型を返す
# 3. 成功時は検証済みオブジェクト、失敗時は詳細なエラー情報を返す
# 4. null/undefinedを内部状態として持たない
# 5. 不変性を保証する（Object.freeze等）
# 6. 共通エラー型を使用してDRYな実装を実現
#
# 例:
# ConfigProfile.create(input: string): Result<ConfigProfile, ConfigProfileError>
# DirectiveType.create(twoParamsResult: TwoParams_Result): DirectiveType
# LayerType.create(twoParamsResult: TwoParams_Result): LayerType
# PromptPath.create(path: string): Result<PromptPath, InvalidPathError>
