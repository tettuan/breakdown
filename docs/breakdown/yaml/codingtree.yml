# Breakdown CLI 型フロー - main関数からBreakdownConfigの値を得るまで
# 全域性原則に基づく主要な型宣言の受け渡し

# 核心的な型変換フロー
type_flow:
  name: "Type transformation pipeline"
  description: "CLI引数からBreakdownConfig値までの型安全な変換"

  # 型変換の連鎖
  transformations:
    - step: 1
      from: "string[]"
      to: "string | null"
      operation: "ConfigPrefixDetector.detect()"
      description: "CLI引数から設定プレフィックスを抽出"

    - step: 2
      from: "string | null"
      to: "ConfigProfileName"
      operation: "ConfigProfileName.create()"
      description: "Smart Constructor パターンで検証済み型を作成"
      totality_principle: "null → ConfigProfileName { value: null }"

    - step: 3
      from: "ConfigProfileName"
      to: "Record<string, unknown>"
      operation: "loadBreakdownConfig()"
      description: "BreakdownConfig経由で設定を読み込み"
      error_handling: "try-catch → empty config fallback"

    - step: 4
      from: "Record<string, unknown>"
      to: "Result<CustomConfig | undefined, ConfigError>"
      operation: "ParamsCustomConfig.create()"
      description: "Result型でエラーを値として表現"
      totality_principle: "部分関数を全域関数に変換"

# 全域性原則適用の主要型
totality_types:
  ConfigProfileName:
    pattern: "Smart Constructor"
    file: "lib/types/config_profile_name.ts"
    principle: "null許可でありえない状態を排除"
    structure:
      private_constructor: true
      static_create: "string | null → ConfigProfileName"
      value_property: "string | null"
    validation:
      pattern: "^[a-z0-9_-]{1,50}$"
      invalid_handling: "null値を持つインスタンスを返す"

  Result:
    pattern: "Discriminated Union"
    file: "lib/types/enums.ts"
    principle: "エラーを例外でなく値として表現"
    structure:
      success: "{ status: SUCCESS, data: T }"
      error: "{ status: ERROR, error: E }"
    usage: "部分関数を全域関数に変換"

  ParamsCustomConfig:
    pattern: "Smart Constructor + Result"
    file: "lib/types/params_custom_config.ts"
    principle: "設定不備を型で表現"
    structure:
      static_create: "Record<string, unknown> → Result<CustomConfig | undefined, ConfigError>"
      undefined_handling: "設定なし → undefined (正常な状態)"
      partial_config: "DEFAULT_CUSTOM_CONFIG とマージ"

# 型安全性保証
type_safety:
  input_validation:
    - "ConfigPrefixDetector: 引数パターンマッチング"
    - "ConfigProfileName: 正規表現による制約"
    - "ParamsCustomConfig: 設定構造の検証"

  error_as_values:
    - "ConfigError: 設定エラーの型表現"
    - "Result<T, E>: 例外の代わりに値でエラー表現"
    - "undefined: 設定なしの明示的表現"

  impossible_states_elimination:
    - "ConfigProfileName.value: null or valid string (無効文字列の排除)"
    - "Result: success or error (曖昧な状態の排除)"
    - "CustomConfig: undefined or valid config (部分的無効設定の排除)"

# 主要な型受け渡しポイント
key_handoffs:
  cli_to_config:
    type: "string[] → ConfigProfileName"
    responsibility: "CLI引数から型安全な設定名へ"
    files: ["cli/breakdown.ts", "lib/types/config_profile_name.ts"]

  config_to_breakdown:
    type: "ConfigProfileName → Record<string, unknown>"
    responsibility: "設定名から実際の設定値へ"
    files: ["lib/config/loader.ts"]
    external_dependency: "jsr:@tettuan/breakdownconfig@^1.1.4"

  breakdown_to_params:
    type: "Record<string, unknown> → Result<CustomConfig | undefined, ConfigError>"
    responsibility: "汎用設定からBreakdownParams用設定へ"
    files: ["lib/types/params_custom_config.ts"]

# 境界とスコープ
boundaries:
  scope: "main() → BreakdownConfig value acquisition"
  next_phase: "BreakdownParams initialization"
  type_boundary: "Result<CustomConfig | undefined, ConfigError>"
