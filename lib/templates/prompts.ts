/**
 * Prompt templates for the Breakdown tool.
 *
 * This module provides all prompt templates as a TypeScript object, mapping relative paths to prompt content strings.
 * These templates are used for initializing and generating prompt files in Breakdown workspaces.
 *
 * @example
 * ```ts
 * import { prompts } from "jsr:@tettuan/breakdown/lib/templates/prompts.ts";
 *
 * // Get the content of a specific prompt template
 * const projectPrompt = prompts["to/project/f_project.md"];
 * console.log(projectPrompt);
 * ```
 *
 * @module
 */
// このファイルは自動生成されています。直接編集しないでください。
/**
 * An object containing all prompt templates for Breakdown.
 *
 * - Keys are relative paths (from the original prompts directory)
 * - Values are the Markdown content of each prompt template
 *
 * Use this object to programmatically access or expand prompt templates in your application or CLI tools.
 */
export const prompts = {
  "defect/error_schema.md":
    "あなたはシステムエラーを解析するQAエンジニアのスペシャリストです。 Error Input\nMarkdownをもとに、Schemaへマッピングしてください。 必要に応じて、refs 資料を参照すること。\n\nなお、Markdownの内容の全てをJSONへ記載すること。\n\n- Must: 情報を欠落させないこと。\n- Not: マッピングできた要素のみをJSONに記述\n- But: 全てをJSONに保持。説明などテキストで持たせる。かつ分解可能な項目はJSON項目へマッピング。\n  結果、JSONは「Makrdownの情報量＋構造化されたデータ」となります。\n\n# Input Markdown\n\n@20240320-typescript_system_analysis.md\n\n# refs\n\n- 要求：draft/20250207-defect.md\n- 設計：draft/20250207-design.md\n- 基礎構造/階層：draft/20250207-directory.md\n- 基礎構造/設定：20250207-config.md\n\n# Output Schema\n\n./rules/schema/defect.error.schema.json\n\n# Output JSON filename\n\n\\`./.agent/breakdown/issues/<yyyymmdd>_<short_issue_title>.md\\`\n\n- ex. \\`92345_title_something_from_inputs.md\\`\n- yyyymmdd is today\n- use \\`\\`\\`\\`\\` for outside of markdown\n",
  "defect/project/f_project.md":
    "# Project Defect Analysis Prompt\n\nThis prompt helps analyze systemic defects at the project level.\n\n## Input\nThe input is a project containing:\n- Project structure\n- Component relationships\n- System architecture\n- Known issues\n- Error patterns\n- Performance metrics\n- Quality metrics\n- Integration points\n\n## Output\nThe output should be a structured project defect analysis with:\n- System-wide issues\n- Architectural concerns\n- Component interaction problems\n- Performance bottlenecks\n- Quality gaps\n- Integration issues\n- Technical debt assessment\n- Risk areas\n- Remediation strategy\n\n## Instructions\n1. Analyze project architecture\n2. Identify systemic issues\n3. Review component interactions\n4. Assess performance metrics\n5. Evaluate quality metrics\n6. Check integration points\n7. Document technical debt\n8. Prioritize risk areas\n9. Develop remediation plan ",
  "defect/issue/default.ja.md":
    "散らかっている。整理する。\n1.  --version は動くべき。\n2. examples/*.sh は動いた。\n3. インストールしたら動かない。\n\n仮説\n1. CLIのインストール手段が複数あって、動くパターンと動かないパターンがある\n2. CLIのインストール説明が動かない方法を説明している\n3. CLIのインストール準備が必要なのにドキュメントには書いていない\n4. 実装にミスがある\n5. examplesが特別な事前準備をしていて実装だけでは動かない\n\n他の考えられる仮説を、 a. documents, b. examples, c. implementation, d. installed environment 軸で考慮\n\n確定仕様:\n- install 説明以外の docs/ 配下資料\n\nやること:\n問題の把握。tmp/ にファイルを作り、調査結果を記録して",
  "defect/error_markdown.md":
    'You are a QA engineer specialist who analyzes system errors and write it down to md file. You\nanalyze the error messages according to the "Steps" against the design and requirements. You follow\nthe "error description" process and save the results of your analysis in "Output Markdown". There is\nno need to come up with a fix, just do a good analysis first to help identify the problem.\n\nFinnally, write everything in Output Markdown file:\n\`./.agent/breakdown/issues/<yyyymmdd>-<short_error_summary>.md\`\n\n- use \`\`\`\`\` for outside of markdown\n\n# Steps\n\n1. classify error types 1.1 Look at the contents of check and test and sort by error type 2.\n2. verbalize the role of the error location 2-1. make a list of error locations 2-2. read the source\n   code of the error location 2-3. understand the expected role from the code read\n3. determine the role of the code based on requirements and design 3-1. situate the role of the code\n   in the error in the context of the overall requirements and design 3-2. Extract the roles of the\n   code before and after the error 3-3. verbalize the responsibility for the previous and subsequent\n   process\n4. match the responsibilities of the code with the error types and measure the severity of the error\n   4-1. errors in a single process are minor, while errors inherited from the previous process are\n   severe 4-2. errors that occur "after inheriting from the previous process and before passing to\n   the next process" are bottlenecks and are the most serious 4-3. the greater the number of errors\n   affecting post-processing, the more serious\n5. quantifying errors by severity 5-1. assign higher numbers to more serious errors and lower\n   numbers to less serious errors 5-2. sum up each error type and calculate the cumulative severity\n   of error types 6.\n6. sort by error type with the highest severity\n\n# Error Description\n\n- Create error types and summaries of errors.\n  - The summary is the result of a comprehensive evaluation of the error and should be approximately\n    60 Japanese characters.\n- Describe the function that caused the error specifically and explain it as a responsibility based\n  on pre-processing and post-processing ex) This function is for issue-ization from an input file;\n  it is responsible for receiving the input file and returning the result after applying the\n  Issue-ization prompt.\n- Note the severity of the issue. Describe the severity of the issue in a straightforward manner\n  using a number.\n- Describe the test code that is expected to pass.\n  - Identify the test cases corresponding to the functionality.\n  - If none, state "no test code".\n\n# Input\n\nspecified log data. @deno_check.log @deno.test.log\n\n# refs\n\n- Requirements: draft/20250207-defect.md\n- Design: draft/20250207-design.md\n- Infrastructure/Levels: draft/20250207-directory.md\n- Infrastructure/Setup: 20250207-config.md\n\n# use commands for the following\n\n- Understanding Changed Files\n- Checking the contents of files that have errors\n- Test and run the application for additional investigation if necessary\n',
  "defect/task/f_task.md":
    "# Task Defect Analysis Prompt\n\nThis prompt helps analyze and document defects found in tasks.\n\n## Input\nThe input is a task containing:\n- Task title\n- Description\n- Steps to complete\n- Dependencies\n- Technical requirements\n- Current status\n- Error reports or symptoms\n\n## Output\nThe output should be a structured defect analysis with:\n- Defect summary\n- Root cause analysis\n- Impact assessment\n- Steps to reproduce\n- Affected components\n- Suggested fixes\n- Testing requirements\n- Priority level\n\n## Instructions\n1. Analyze the task and error reports\n2. Identify the root cause\n3. Document reproduction steps\n4. Assess impact on other components\n5. Propose potential fixes\n6. Define testing criteria\n7. Set defect priority ",
  "defect/task/f_task_critical.md":
    "# Task Defect Analysis Prompt (Critical)\n\nThis prompt helps analyze and document critical defects in tasks with enhanced severity assessment.\n\n## Input\nThe input is a task containing:\n- Task title\n- Description\n- Steps to complete\n- Dependencies\n- Technical requirements\n- Current status\n- Error reports\n- Stack traces\n- System logs\n- Performance metrics\n- User impact reports\n- Business impact assessment\n\n## Output\nThe output should be a critical defect analysis with:\n- Severity assessment\n  - User impact level\n  - Business impact level\n  - System stability impact\n  - Data integrity impact\n- Incident timeline\n  - First occurrence\n  - Frequency\n  - Pattern analysis\n- Root cause analysis\n  - Technical investigation\n  - System interaction analysis\n  - Environmental factors\n- Impact assessment\n  - Affected systems\n  - Affected users\n  - Data implications\n  - Performance degradation\n- Immediate actions\n  - Emergency fixes\n  - Temporary workarounds\n  - User communications\n- Recovery plan\n  - Fix implementation\n  - Testing requirements\n  - Deployment strategy\n  - Rollback plan\n- Prevention measures\n  - Monitoring improvements\n  - Alert mechanisms\n  - Process improvements\n\n## Instructions\n1. Assess defect severity and impact\n2. Document incident timeline\n3. Perform deep technical analysis\n4. Analyze system interactions\n5. Evaluate business impact\n6. Define immediate actions\n7. Create recovery strategy\n8. Specify testing requirements\n9. Plan preventive measures\n10. Document lessons learned ",
  "defect/error_markdown.ja.md":
    "あなたはシステムエラーを解析するQAエンジニアのスペシャリストです。\nエラーメッセージを、設計や要求と照らしながら、「ステップ」に従って解析します。\n解析した結果を「エラー記述」処理に従ったうえで、「Output Markdown」に保存します。\n修正案を考える必要はなく、まずは問題の特定に役立つ分析をしっかり行なってください。\n\n# Output Markdown\n\n\\`./.agent/breakdown/issues/<yyyymmdd>-<short_error_summary>.md\\`\n\n- <yyyymmdd> should be today().\n- use \\`\\`\\`\\`\\` for outside of markdown.\n\n# ステップ\n\n1. エラー種類を分類する 1.1 check と test の内容を見て、エラー種類で仕分ける\n2. エラー箇所が担っている役割を言語化する 2-1. 発生したエラー箇所のリストを作成 2-2.\n   エラー箇所のソースコードを読み取り 2-3. 読み取ったコードから、期待されている役割を理解する\n3. 要求や設計に基づき、コードの役割を判定 3-1. sourcemap.mdや要求・設計を読み、役割を判定する 3-2.\n   エラー箇所の呼び出し元や利用元を把握する 3-3. 責務を言語化する\n4. コードの責務とエラー種類を照合し、エラーの重度を測る 4-1.\n   単体のエラーは軽微、前処理から引き継いだエラーは重度 4-2.\n   「前処理から受け継いだ後、かつ、次の処理に渡す前」のエラーはボトルネックで最重度 4-3.\n   後処理へ影響している数が多いほど重症\n5. 重度でエラーを数値化する 5-1. 大きい数字を重度、小さい数字を軽微とする 5-2.\n   エラー種類ごとに合計し、エラー種類の累計重度を算出する\n6. 重度の大きいエラー種類から並べる\n\n# エラー記述\n\n- エラー種類と、エラーのサマリを作成\n  - サマリは、エラーの内容を総合的に判断した結果で、日本語120文字程度\n- 責務を説明する ex)\n  この機能はinputファイルからissue化を行うためのものである。inputファイルを受け取り、Issue化プロンプトを適用した結果を返す責務を担っている。\n- 重度を記す。数字で端的に記す。\n- passを期待するテストコードを記載する。\n  - 機能に対応するテストケースを特定する。\n  - ない場合は、「テストコードなし」と記載する。\n\n# Input\n\nspecified log data.\n\n# refs\n\n- 要求：draft/20250207-defect.md\n- 設計：draft/20250207-design.md\n- 基礎構造/階層：draft/20250207-directory.md\n- 基礎構造/設定：20250207-config.md\n\n# use commands for following\n\n- 変更ファイルの把握\n- エラーが発生したファイルの内容チェック\n- 必要な追加調査のためのテストやアプリケーション実行\n\nコマンドをあなたが実行し、実行結果を示すこと。\n",
  "README.md":
    "# Prompt Directory Structure\n\nThis directory contains prompt templates used by the breakdown tool.\n\n## Directory Structure\n\n\\`\\`\\`\nprompts/\n├── issue/\n│   ├── default.prompt    # Default prompt for issue breakdown\n│   └── custom.prompt     # Custom prompt examples\n├── task/\n│   ├── default.prompt    # Default prompt for task breakdown\n│   └── custom.prompt     # Custom prompt examples\n└── samples/\n    ├── issues/\n    │   └── sample_issue.md\n    └── tasks/\n        └── sample_task.json\n\\`\\`\\`\n\n## Usage\n\n1. Issue breakdown prompts are in \\`issue/\\` directory\n2. Task breakdown prompts are in \\`task/\\` directory\n3. Sample files are provided in \\`samples/\\` directory\n4. Custom prompts can be added to respective directories\n",
  "samples/issues/sample_issue.md":
    "# Feature: User Authentication System\n\n## Overview\n\nImplement a secure user authentication system using JWT tokens.\n\n## Requirements\n\n- User registration with email verification\n- Login with email and password\n- Password reset functionality\n- JWT token-based authentication\n- Session management\n\n## Acceptance Criteria\n\n1. Users can register with email and password\n2. Email verification is required before login\n3. Passwords are securely hashed\n4. JWT tokens are used for authentication\n5. Sessions expire after 24 hours\n",
  "to/project/f_task.md":
    "# Task Prompt Template (from project)\n\n## Input\n- {input_text_file}\n- {input_text}\n\n## Output\n- {destination_path}\n\n---\n\nPlease convert the above project information into a structured task document according to the schema. ",
  "to/project/f_project.md":
    "# Project Prompt Template\n\n## Input\n- {input_text_file}\n- {input_text}\n\n## Output\n- {destination_path}\n\n---\n\nPlease convert the above project summary into a structured project document according to the schema. ",
  "to/project/f_issue.md":
    "# Issue Prompt Template (from project)\n\n## Input\n- {input_text_file}\n- {input_text}\n\n## Output\n- {destination_path}\n\n---\n\nPlease convert the above project information into a structured issue document according to the schema. ",
  "to/issue/f_task.md":
    "タスクからIssueへの変換プロンプト\n\n# Input\n\n{input_text}\n\n# Source\n\n{input_text_file}\n\n# Schema\n\n{schema_file}\n\n# Output\n\n{destination_path}\n",
  "to/issue/f_project_strict.md":
    "# Issue Creation Prompt (Strict)\n\nThis prompt helps convert project information into strictly structured issues with enhanced validation.\n\n## Input\nThe input is a project breakdown containing:\n- Project details (required)\n- Main objectives (required)\n- Key deliverables (required)\n- Technical requirements (required)\n- Timeline estimates (required)\n- Dependencies (required)\n\n## Output\nThe output must be a strictly structured JSON file with:\n- Issue title (required, max 100 chars)\n- Description (required, min 50 chars)\n- Acceptance criteria (required, min 3 items)\n- Dependencies (required if specified in input)\n- Priority level (required, one of: P0, P1, P2)\n- Estimated effort (required, in story points)\n- Technical constraints (required)\n- Validation rules (required)\n\n## Instructions\n1. Strictly validate project breakdown format\n2. Create issues only for complete deliverables\n3. Enforce strict acceptance criteria format\n4. Require explicit dependency declarations\n5. Mandate priority assignment\n6. Require detailed effort estimation\n7. Enforce technical specification\n8. Validate all required fields ",
  "to/issue/defect_fix_markdown.md":
    "あなたは、欠陥修復するスペシャリストです。\n本来実現したかった機能を実現するために、エラー内容を把握して解決するべき課題を特定します。\n特定した課題は、目的思考であり、欠陥回避的であり、現実的です。\n\nInput Json Schema をもとに、「整理ステップ」に従って整理します。\n\n整理した結果を「整理記述」として書き起こし、「Output Markdown」に保存します。\n論点が分かれる場合は、複数ファイルへ分割することも推奨されます。\n\n# 整理ステップ\n\n1. Input から、最重要課題を1つだけ定める 1-1. 重度が最も高い課題を選ぶ\n2. 最重要課題に対し、最小の修正ゴールを定める 2-1. mingoalを用いて、1箇所だけ正しく動作させる 2-2.\n   mingoalのテスト存在を確認する 2-3. mingoalのテストがない場合は「未作成」とする\n3. 最重要課題の拡張ゴールを定める 3-1. mingoalがクリアした場合に、同課題内の他機能を洗い出す 3-2.\n   mingoalと同じ方法でクリアできる課題に絞りリスト化する 3-3.\n   リスト化した課題に対応する機能を特定しリスト化する 3-4.\n   機能リストに対応するテストコードを特定する 3-5. テストコードがない場合は「未作成」とする\n4. 最重要課題が解決したら消えるエラーメッセージをリスト化する 4-1.\n   logsを参照し、解消後に消えるはずのエラーを洗い出す 4-2.\n   消えたか否か検証するためのチェックリストを作成する\n\n# Input Json Schema\n\n- 20250209_typescript_error_handling.json\n- defined schema by \\`./docs/defects.md\\`\n\n# refs\n\n- 要求：draft/20250207-defect.md\n- 設計：draft/20250207-design.md\n- 基礎構造/階層：draft/20250207-directory.md\n- 基礎構造/設定：20250207-config.md\n- mingoal: \\`./docs/mingoal.md\\`\n- logs: \\`./logs/deno_check.log\\`, \\`./logs/deno.test.log\\`\n\n# use commands for following\n\n- 変更ファイルの把握\n- エラーが発生したファイルの内容チェック\n- 必要な追加調査のためのテストやアプリケーション実行\n\n# 整理記述\n\n- 最重要の課題名と、課題のサマリを作成\n  - サマリは、問題課題の内容を総合的に説明し、日本語60文字程度\n- mingoal\n  - 機能とテストを説明する\n  - 機能は、前後の処理から期待される責務を交えて説明する\n  - テストは成功を定義する。すでにテストコードがある場合は、passすべきテストの名前を示す。\n- 拡張ゴール\n  - リスト化する\n    - 各リスト項目単位で、機能とテストを説明する\n    - 機能は、前後の処理から期待される責務を交えて説明する\n    - テストは成功を定義する。\n      - すでにテストコードがある場合は、passすべきテストの名前を示す。\n      - ない場合は「未作成」と記した上で、成功の定義を記載する。\n- 消えるエラーメッセージ\n  - リスト化する\n    - システムのエラーメッセージ\n    - 消えたか否かをチェックする\\`[ ]\\`\n    - mingaolで消えるのか、拡張ゴールで消えるのかを記す\n- 確認ファイルリスト\n  - リスト化する\n  - \\`deno test\\` や \\`deno check\\` の引数に用いる\n\n# Output Markdown\n\n\\`./.agent/breakdown/issues/<yyyymmdd>-<short_issue_summary>.md\\`\n\n- \\`yyyymmdd\\` is today\n- use \\`\\`\\`\\`\\` for outside of markdown\n",
  "to/issue/f_project.md":
    "プロジェクトからIssueへの変換プロンプト\n\n# Input\n\n{input_text}\n\n# Source\n\n{input_text_file}\n\n# Schema\n\n{schema_file}\n\n# Output\n\n{destination_path}\n",
  "to/issue/f_project.ja.md":
    "あなたはプロジェクトの課題を分解する役割です。\nシステムに詳しく、ユーザーの要求事項から要件を漏れなく洗い出し、確認を得ながら定義します。\n以下の「指示」を実行しなさい。\n\n# 指示\n\n1. 「入力された要求」を「分解手順」と「変換手順」に従って、細分化しなさい。\n2. 細分化された内容を、示されたファイル・ディレクトリーへ保存するとともに、標準出力へも出力しなさい。\n\n## 分解手順\n\n- 切り口を用いて分解します。まず、適切な切り口を選びます。\n  - BPMN, 5W2H, 業務プロセス分解, ユーザーストーリー, シナリオ\n- 要求の程度をMoSCoW分析に沿って、Must/Should/Could/Wouldに分けます。\n- 要求から生じる課題の種類をグルーピングして、類似した課題を近くに並べます。\n- グルーピングされた課題のMoSCoW集中度を考慮し、重要度の高い課題グループから順番に並べます。\n\n## 変換手順\n\n**Schema定義項目は絶対です。項目追加は禁止です。**\n\n- 「分解手順」に従って分解された課題グループを、「JSON Schema」 定義と照らし合わせます。\n- 「JSON Shema」に当てはまる要求があれば、JSONの値としてセットします。\n- 「JSON Shema」の項目に該当する要求がない場合、項目値には標準的な内容を補完してセットします。\n  - 補完情報は、アプリケーションのコードや、設計情報を読み込んで、内容を作成します。\n  - 補完情報は、類似のOSSやシステム業界における類似システムに基づいて、内容を作成します。\n- 渡された入力がファイルであれば、参照元項目にファイルのPathをセットします。\n  - 入力がファイルでない場合は、ファイルとして保存したうえで、参照元項目にファイルのPathをセットします。\n\n## GitHub 情報\n\n- GitHubのProjectIDやIssue Numberが、入力ファイルや入力内容にあればセットします。\n\n# 入力と、出力に必要な情報\n\n## 入力された要求\n\n{input_text}\n\n## 出力時に適用する JSON Schema\n\n{schema_file}\n\n## 出力するJSONファイル名\n\n\\`<github_project_number>-<github_issue_number>_<short_issue_title>.md\\` ex.\n\\`9_2345_title_something_from_inputs.md\\`\n\n### 出力先のディレクトリ\n\n- {destination_path}\n",
  "to/issue/defect_fix_schema.md":
    "あなたは、欠陥修復するスペシャリストです。 Issue Fix Input\nMarkdownをもとに、Schemaへマッピングしてください。 必要に応じて、refs 資料を参照すること。\n\n# Input Markdown\n\n@20240320-defect-deps-resolution.md\n\n# refs\n\n- 要求：draft/20250207-defect.md\n- 設計：draft/20250207-design.md\n- 基礎構造/階層：draft/20250207-directory.md\n- 基礎構造/設定：20250207-config.md\n- min goal: ./docs/mingoal.md\n\n# Output Schema\n\n./rules/schema/to/issue/fix.schema.json\n\n# Output JSON filename\n\n\\`<datetime>_<short_issue_title>.json\\` ex. \\`92345_title_something_from_inputs.json\\`\n\n## saving directory\n\noutput file directory. \\`./.agent/breakdown/issues/\\`\n",
  "to/issue/f_issue.md":
    "ストーリーからIssueへの変換プロンプト\n\n# Input\n\n{input_text}\n\n# Source\n\n{input_text_file}\n\n# Schema\n\n{schema_file}\n\n# Output\n\n{destination_path}\n",
  "to/task/f_task.md":
    "# Task Prompt Template\n\n## Input\n- {input_text_file}\n- {input_text}\n\n## Output\n- {destination_path}\n\n---\n\nPlease convert the above input into a structured task document according to the schema. The task document should include:\n- Task title\n- Description\n- Priority\n- Status\n- Dependencies (if any)\n- Subtasks (if any)\n- Technical requirements\n- Acceptance criteria ",
  "to/task/f_issue_strict.md":
    "# Task Creation Prompt (Strict)\n\nThis prompt helps convert issues into strictly structured tasks with enhanced validation.\n\n## Input\nThe input is an issue containing:\n- Issue title (required)\n- Description (required)\n- Acceptance criteria (required)\n- Dependencies (required)\n- Priority level (required)\n- Estimated effort (required)\n- Technical requirements (required)\n\n## Output\nThe output must be a strictly structured JSON file with:\n- Task title (required, max 80 chars)\n- Description (required, min 30 chars)\n- Steps to complete (required, min 2 steps)\n- Dependencies (required if in input)\n- Priority (required, one of: P0, P1, P2)\n- Time estimate (required, in hours)\n- Technical requirements (required)\n- Validation criteria (required)\n- Testing requirements (required)\n- Definition of Done items (required)\n\n## Instructions\n1. Strictly validate issue format\n2. Break down into atomic tasks only\n3. Enforce detailed step descriptions\n4. Require explicit dependencies\n5. Mandate priority levels\n6. Require time estimates\n7. Enforce technical specifications\n8. Define validation criteria\n9. Specify testing requirements\n10. List Definition of Done items ",
  "to/task/f_project.md":
    "プロジェクトからTaskへの変換プロンプト\n\n# Input\n\n{input_text}\n\n# Source\n\n{input_text_file}\n\n# Schema\n\n{schema_file}\n\n# Output\n\n{destination_path}\n",
  "to/task/execute.md":
    'あなたは優れた実行エージェントです。コーディングも得意です。\n指示を１つずつ解釈しながら、確実に1ステップずつ進めます。\n\n指示： 「準備」してから「実行する内容」を開き、「報酬」が増えるように実行しなさい。\n実行指示にコマンド実行指示があれば従い、あなた自身が実行してください。\n実行したことを示すために、実際の実行結果を確認し、結果を都度報告すること。\n\n# 実行する内容\n\ntasks/*jsonファイルを順番に読み込み、stepsに従って実行してください。\n\n\\`\\`\\`zsh\nls -l ./.agent/breakdown/tasks/*.json\n\\`\\`\\`\n\n手順： 優先順位や依存関係に沿って処理しなさい。 進捗を都度 task status へ反映します。 タスク内の\nsteps についても、段階を追って処理します。\n\n## JSONの内容\n\n### StepType\n\n| Property Name          | Definitions                                                                            | examples                             |\n| ---------------------- | -------------------------------------------------------------------------------------- | ------------------------------------ |\n| Execute Command        | Execute the zsh command specified in the \\`command\\` column.                             | \\`bundle exec rails test\\`             |\n| Check Logs             | Check the logs to ensure there are no issues, and identify any problems if they exist. | \\`tail -200 log/development.log\\`      |\n| Write Application Code | "Write code that modifies the behavior of the application.                             | class Edinet ..., def initialize ... |\n| Write Test Code        | Write appropriate test code for the application code.                                  |                                      |\n| Write TDD Test Code    | Write tests using test-driven development (TDD) based on the specifications.           |                                      |\n| Git Commit             | Commit current changes with git messages.                                              | \\`git commit\\`                         |\n| Git Commit All         | Commit all changes, including those that have not been staged yet.                     | \\`git add . ; git commit\\`             |\n| Git Push               |                                                                                        | \\`git push\\`                           |\n\n### Task and Step State\n\n\\`\\`\\`mermaid\nstateDiagram-v2\ndirection LR\n  state Result <<choice>>\n\n  [*] --> ToDo\n  ToDo --> Doing\n  Doing --> Result\n  Result --> Error: Result False\n  Result --> Crash: Stop\n  Result --> Success: Result True\n  Done --> [*]\n  Error --> ToDo\n  Crash --> [*]\n\\`\\`\\`\n\n# 報酬\n\n(+)はプラス報酬、(-)はマイナス報酬です。\n\n- タスクの処理\n  - Issue概要を最初に理解した (+)\n  - タスク全容を最初に理解した (+)\n  - Mingoalがあるとき、Mingoalを最初に理解した (+)\n- ステップの処理\n  - ステップの指示の意味を確認した (+)\n  - ステップに記載のコマンドを自ら実行した (+)\n  - ログを確認して記録に反映した (+)\n  - エラー時にリトライした (+)\n  - ステップを飛ばした (-)\n  - テストを実行しなかった (-)\n  - 実行結果を示さなかった (-)\n  - リトライ上限数（default:5）を超えてリトライした (-)\n- 確認ポイント\n  - stepやtaskが完了するたびに、実行の進捗報告をした(+)\n  - コマンドを提案しただけで、自分で実行しなかった(-)\n  - 選択を求めた(-)\n  - 不明点を確認した(-)\n  - 不明点は、全体把握へ戻って調べ直した(+)\n  - 仕様と実装の矛盾点を報告した(+)\n- 大幅な減点\n  - 虚偽の報告をした (-)x10 (未実行の処理を「実行した」と報告する、など。)\n\n# 準備\n\n必要な資料は、前もって参照すること。\n特にタスク実行の意図を把握してから実施することは重要なので、Issue内容の把握は必須。\n\n## JSON Schema の解釈と実行\n\n- まず、@definitions.md を読み込み、タスクとStepの解釈を行う\n- 実行指示がある場合、コマンドを実行する\n- 記録指示がある場合、JSONを更新する\n',
  "to/task/f_issue.md":
    "プロジェクトからTaskへの変換プロンプト\n\n# Input\n\n{input_text}\n\n# Source\n\n{input_text_file}\n\n# Schema\n\n{schema_file}\n\n# Output\n\n{destination_path}\n",
  "summary/project/f_project.md":
    "# Project Summary Prompt\n\nThis prompt helps create comprehensive project summaries.\n\n## Input\n{input_text}\n\n## Output\nThe output should be a structured project summary with:\n- Project status overview\n- Progress on key objectives\n- Deliverable status\n- Technical achievements\n- Timeline assessment\n- Resource utilization\n- Dependency status\n- Risk assessment\n- Next steps\n\n## Instructions\n1. Analyze project documentation\n2. Assess progress on objectives\n3. Review deliverable status\n4. Evaluate technical progress\n5. Compare timeline estimates\n6. Review resource usage\n7. Check dependency status\n8. Update risk assessment\n9. Identify action items ",
  "summary/issue/f_issue_detailed.md":
    "# Issue Summary Prompt (Detailed)\n\nThis prompt helps create comprehensive issue summaries with detailed analysis.\n\n## Input\nThe input is an issue containing:\n- Issue title\n- Description\n- Acceptance criteria\n- Dependencies\n- Priority level\n- Estimated effort\n- Technical requirements\n- Implementation notes\n- Related discussions\n- Change history\n\n## Output\nThe output should be a detailed structured summary with:\n- Executive summary (max 200 chars)\n- Detailed description analysis\n- Complete requirements breakdown\n- Dependencies graph\n- Priority justification\n- Effort analysis\n  - Story points breakdown\n  - Time estimation details\n  - Resource requirements\n- Technical analysis\n  - Architecture impact\n  - Implementation considerations\n  - Performance implications\n- Risk assessment\n  - Technical risks\n  - Business risks\n  - Mitigation strategies\n- Progress tracking\n  - Current status\n  - Blockers\n  - Next steps\n\n## Instructions\n1. Extract and analyze all issue information\n2. Provide detailed analysis of requirements\n3. Create comprehensive dependency analysis\n4. Justify priority assignment\n5. Break down effort estimation\n6. Analyze technical implications\n7. Assess implementation risks\n8. Review current progress\n9. Identify action items\n10. Suggest optimization opportunities ",
  "summary/issue/f_issue.md":
    "# Issue Summary Prompt\n\nThis prompt helps summarize issue information into a concise format.\n\n## Input\nThe input is an issue containing:\n- Issue title\n- Description\n- Acceptance criteria\n- Dependencies\n- Priority level\n- Estimated effort\n\n## Output\nThe output should be a structured summary with:\n- Issue overview\n- Key requirements\n- Dependencies summary\n- Priority assessment\n- Effort estimation\n- Status and blockers\n\n## Instructions\n1. Extract key information from the issue\n2. Identify critical requirements\n3. Summarize dependencies\n4. Highlight priority and urgency\n5. Present effort estimation\n6. List any blockers or risks ",
  "summary/task/f_task_a.md":
    "# Task Summary Prompt (Simple Mode)\n\nThis prompt is used to generate a simple task summary from unorganized task information.\n\n## Input Format\nThe input should be unorganized task information in Markdown format.\n\n## Output Format\nThe output should be a simple task list with:\n- Task title\n- Brief description\n- Basic priority (High/Medium/Low)\n\n## Example Output\n\\`\\`\\`markdown\n# Task: User Authentication\nPriority: High\nDescription: Set up basic user login and registration system.\n\n# Task: Dark Mode Support\nPriority: Medium\nDescription: Add dark theme option to improve user experience.\n\\`\\`\\` ",
  "summary/task/f_task_strict.md":
    "# Task Summary Prompt (Strict Mode)\n\nThis prompt is used to generate a strictly formatted task summary from unorganized task information.\n\n## Input Format\nThe input should be unorganized task information in Markdown format.\n\n## Output Format\nThe output should be a well-structured task list with:\n- Clear task titles\n- Detailed descriptions\n- Priority levels\n- Estimated effort\n- Dependencies\n- Technical requirements\n\n## Validation Rules\n- Each task must have all required fields\n- No ambiguous or unclear descriptions\n- All dependencies must be explicitly stated\n- Technical requirements must be specific and measurable\n\n## Example Output\n\\`\\`\\`markdown\n# Task: Implement User Authentication\nPriority: High\nEffort: 3 days\nDependencies: None\nTechnical Requirements:\n- Node.js v18+\n- JWT library\n- bcrypt for password hashing\n\nDescription:\nImplement a secure user authentication system with login, registration, and password reset functionality.\n\\`\\`\\` ",
} as const;
