/**
 * Unit tests for interfaces.ts
 * 
 * These tests verify the functional behavior and usage patterns of workspace interfaces,
 * focusing on:
 * 1. Interface usage patterns and practical implementation scenarios
 * 2. Edge cases and boundary value testing
 * 3. Error handling and validation behavior
 * 4. Interface contracts and behavior verification
 * 5. Practical integration examples and mock implementations
 */

import {
  assertEquals,
  assertExists as _assertExists,
  assertRejects,
  assertThrows as _assertThrows,
} from "@std/assert";
import { BreakdownLogger } from "jsr:@tettuan/breakdownlogger";
import type { 
  WorkspaceConfig, 
  PathResolutionStrategy,
  WorkspaceStructure,
  WorkspaceConfigManager,
  WorkspacePathResolver,
  WorkspaceErrorHandler,
  WorkspaceEventEmitter,
  Workspace
} from "./interfaces.ts";

Deno.test.ignore("WorkspaceConfig Usage Patterns", async (t) => {
  const logger = new BreakdownLogger("unit-config-test");
  const _interfaces = await import("./interfaces.ts");

  await t.step("should support various path formats", () => {
    logger.debug("Testing different path format support");

    // Since we can't instantiate interfaces directly, test path validation logic
    const validatePathFormat = (path: string): { isAbsolute: boolean; platform: string } => {
      if (path.startsWith("/")) return { isAbsolute: true, platform: "unix" };
      if (path.match(/^[A-Z]:\\/)) return { isAbsolute: true, platform: "windows" };
      if (path.startsWith(".")) return { isAbsolute: false, platform: "relative" };
      return { isAbsolute: false, platform: "unknown" };
    };

    // Test Unix paths
    const unixResult = validatePathFormat("/home/user/projects");
    assertEquals(unixResult.isAbsolute, true, "Unix absolute path detected");
    assertEquals(unixResult.platform, "unix", "Unix platform detected");

    // Test Windows paths
    const windowsResult = validatePathFormat("C:\\Users\\user\\projects");
    assertEquals(windowsResult.isAbsolute, true, "Windows absolute path detected");
    assertEquals(windowsResult.platform, "windows", "Windows platform detected");

    // Test relative paths
    const relativeResult = validatePathFormat("./projects");
    assertEquals(relativeResult.isAbsolute, false, "Relative path detected");
    assertEquals(relativeResult.platform, "relative", "Relative platform detected");
  });

  await t.step("should handle empty and minimal configurations", () => {
    logger.debug("Testing edge case configurations");

    // Minimal valid config
    const minimalConfig: WorkspaceConfig = {
      workingDir: ".",
      promptBaseDir: ".",
      schemaBaseDir: ".",
    };

    assertEquals(minimalConfig.workingDir, ".", "Current directory reference");

    // Single character paths
    const singleCharConfig: WorkspaceConfig = {
      workingDir: "/",
      promptBaseDir: "/",
      schemaBaseDir: "/",
    };

    assertEquals(singleCharConfig.workingDir.length, 1, "Single character path");
  });

  await t.step("should validate config completeness in usage", () => {
    logger.debug("Testing configuration validation patterns");

    const validateConfig = (config: WorkspaceConfig): boolean => {
      return !!(
        config.workingDir &&
        config.promptBaseDir &&
        config.schemaBaseDir &&
        config.workingDir.trim() !== "" &&
        config.promptBaseDir.trim() !== "" &&
        config.schemaBaseDir.trim() !== ""
      );
    };

    // Valid config
    const validConfig: WorkspaceConfig = {
      workingDir: "/valid",
      promptBaseDir: "/valid/prompts",
      schemaBaseDir: "/valid/schemas",
    };
    assertEquals(validateConfig(validConfig), true, "Valid config passes");

    // Invalid configs
    const invalidConfig1: WorkspaceConfig = {
      workingDir: "",
      promptBaseDir: "/prompts",
      schemaBaseDir: "/schemas",
    };
    assertEquals(validateConfig(invalidConfig1), false, "Empty workingDir fails");

    const invalidConfig2: WorkspaceConfig = {
      workingDir: "   ",
      promptBaseDir: "/prompts",
      schemaBaseDir: "/schemas",
    };
    assertEquals(
      validateConfig(invalidConfig2),
      false,
      "Whitespace-only path fails"
    );
  });
});

Deno.test.ignore("PathResolutionStrategy Implementation Patterns", async (t) => {
  const logger = new BreakdownLogger("unit-strategy-test");

  await t.step("should handle various path resolution scenarios", async () => {
    logger.debug("Testing path resolution implementations");

    // Mock Unix-style strategy
    const unixStrategy: PathResolutionStrategy = {
      resolve: (path: string): Promise<string> => {
        if (path.startsWith("/")) return Promise.resolve(path);
        return Promise.resolve(`/base/${path}`);
      },
      normalize: (path: string): Promise<string> => {
        return Promise.resolve(path.replace(/\\/g, "/").replace(/\/+/g, "/"));
      },
      validate: (path: string): Promise<boolean> => {
        return Promise.resolve(path.length > 0 && !path.includes("\0"));
      },
    };

    // Test resolution
    assertEquals(await unixStrategy.resolve("/absolute"), "/absolute");
    assertEquals(await unixStrategy.resolve("relative"), "/base/relative");

    // Test normalization
    assertEquals(await unixStrategy.normalize("path//double"), "path/double");
    assertEquals(await unixStrategy.normalize("path\\windows"), "path/windows");

    // Test validation
    assertEquals(await unixStrategy.validate("/valid/path"), true);
    assertEquals(await unixStrategy.validate(""), false);
    assertEquals(await unixStrategy.validate("path\0null"), false);
  });

  await t.step("should handle error cases gracefully", () => {
    logger.debug("Testing error handling in path resolution");

    const errorProneStrategy: PathResolutionStrategy = {
      resolve: async (path: string): Promise<string> => {
        if (path === "ERROR") {
          throw new Error("Resolution failed");
        }
        return path;
      },
      normalize: async (path: string): Promise<string> => {
        if (path.includes("INVALID")) {
          throw new Error("Invalid path format");
        }
        return path.toLowerCase();
      },
      validate: async (path: string): Promise<boolean> => {
        if (path === "THROW") {
          throw new Error("Validation error");
        }
        return path.length > 0;
      },
    };

    // Test error throwing
    await assertRejects(
      () => errorProneStrategy.resolve("ERROR"),
      Error,
      "Resolution failed"
    );

    await assertRejects(
      () => errorProneStrategy.normalize("INVALID_PATH"),
      Error,
      "Invalid path format"
    );

    await assertRejects(
      () => errorProneStrategy.validate("THROW"),
      Error,
      "Validation error"
    );

    // Test successful cases
    assertEquals(await errorProneStrategy.resolve("valid"), "valid");
    assertEquals(await errorProneStrategy.normalize("UPPER"), "upper");
    assertEquals(await errorProneStrategy.validate("valid"), true);
  });

  await t.step("should support platform-specific implementations", () => {
    logger.debug("Testing platform-specific path handling");

    // Windows-style strategy
    const windowsStrategy: PathResolutionStrategy = {
      resolve: async (path: string): Promise<string> => {
        if (path.match(/^[A-Z]:\\/)) return path;
        return `C:\\base\\${path}`;
      },
      normalize: async (path: string): Promise<string> => {
        return path.replace(/\//g, "\\");
      },
      validate: async (path: string): Promise<boolean> => {
        return !path.includes("/") || !path.includes("<>");
      },
    };

    assertEquals(await windowsStrategy.resolve("C:\\absolute"), "C:\\absolute");
    assertEquals(await windowsStrategy.resolve("relative"), "C:\\base\\relative");
    assertEquals(await windowsStrategy.normalize("path/unix"), "path\\unix");
  });
});

Deno.test.ignore("WorkspaceStructure Behavior Verification", async (t) => {
  const logger = new BreakdownLogger("unit-structure-test");

  await t.step("should implement directory lifecycle correctly", () => {
    logger.debug("Testing directory management lifecycle");

    const mockDirectories = new Set<string>();

    const structure: WorkspaceStructure = {
      initialize: async (): Promise<void> => {
        mockDirectories.add("/root");
        mockDirectories.add("/root/prompts");
        mockDirectories.add("/root/schemas");
      },
      ensureDirectories: async (): Promise<void> => {
        if (!mockDirectories.has("/root")) {
          throw new Error("Root directory missing");
        }
      },
      exists: async (path?: string): Promise<boolean> => {
        if (!path) return mockDirectories.has("/root");
        return mockDirectories.has(path);
      },
      createDirectory: async (path: string): Promise<void> => {
        if (mockDirectories.has(path)) {
          throw new Error(`Directory ${path} already exists`);
        }
        mockDirectories.add(path);
      },
      removeDirectory: async (path: string): Promise<void> => {
        if (!mockDirectories.has(path)) {
          throw new Error(`Directory ${path} does not exist`);
        }
        mockDirectories.delete(path);
      },
    };

    // Test initialization
    await structure.initialize();
    assertEquals(await structure.exists("/root"), true, "Root created");
    assertEquals(await structure.exists("/root/prompts"), true, "Prompts created");

    // Test directory creation
    await structure.createDirectory("/root/temp");
    assertEquals(await structure.exists("/root/temp"), true, "Temp directory created");

    // Test error on duplicate creation
    await assertRejects(
      () => structure.createDirectory("/root/temp"),
      Error,
      "already exists"
    );

    // Test directory removal
    await structure.removeDirectory("/root/temp");
    assertEquals(await structure.exists("/root/temp"), false, "Temp directory removed");

    // Test error on removing non-existent
    await assertRejects(
      () => structure.removeDirectory("/root/nonexistent"),
      Error,
      "does not exist"
    );
  });

  await t.step("should handle concurrent operations safely", () => {
    logger.debug("Testing concurrent directory operations");

    const mockDirectories = new Set<string>();
    let operationCounter = 0;

    const structure: WorkspaceStructure = {
      initialize: async (): Promise<void> => {
        operationCounter++;
        await new Promise((resolve) => setTimeout(resolve, 10));
        mockDirectories.add("/root");
      },
      ensureDirectories: async (): Promise<void> => {
        operationCounter++;
        await new Promise((resolve) => setTimeout(resolve, 5));
      },
      exists: async (path?: string): Promise<boolean> => {
        operationCounter++;
        return mockDirectories.has(path || "/root");
      },
      createDirectory: async (path: string): Promise<void> => {
        operationCounter++;
        await new Promise((resolve) => setTimeout(resolve, 5));
        mockDirectories.add(path);
      },
      removeDirectory: async (path: string): Promise<void> => {
        operationCounter++;
        await new Promise((resolve) => setTimeout(resolve, 5));
        mockDirectories.delete(path);
      },
    };

    // Run concurrent operations
    const operations = [
      structure.initialize(),
      structure.createDirectory("/dir1"),
      structure.createDirectory("/dir2"),
      structure.exists("/root"),
    ];

    await Promise.all(operations);

    assertEquals(operationCounter, 4, "All operations completed");
    assertEquals(await structure.exists("/root"), true, "Root exists");
    assertEquals(await structure.exists("/dir1"), true, "Dir1 exists");
    assertEquals(await structure.exists("/dir2"), true, "Dir2 exists");
  });
});

Deno.test.ignore("WorkspaceConfigManager Usage Patterns", async (t) => {
  const logger = new BreakdownLogger("unit-config-manager-test");

  await t.step("should handle configuration lifecycle correctly", () => {
    logger.debug("Testing configuration management lifecycle");

    let currentConfig: WorkspaceConfig = {
      workingDir: "/default",
      promptBaseDir: "/default/prompts",
      schemaBaseDir: "/default/schemas",
    };

    const configManager: WorkspaceConfigManager = {
      load: async (): Promise<void> => {
        // Simulate loading from file
        currentConfig = {
          workingDir: "/loaded",
          promptBaseDir: "/loaded/prompts",
          schemaBaseDir: "/loaded/schemas",
        };
      },
      get: async (): Promise<WorkspaceConfig> => {
        return { ...currentConfig };
      },
      update: async (config: Partial<WorkspaceConfig>): Promise<void> => {
        currentConfig = { ...currentConfig, ...config };
      },
      validate: async (): Promise<void> => {
        if (!currentConfig.workingDir) {
          throw new Error("workingDir is required");
        }
        if (!currentConfig.promptBaseDir) {
          throw new Error("promptBaseDir is required");
        }
        if (!currentConfig.schemaBaseDir) {
          throw new Error("schemaBaseDir is required");
        }
      },
    };

    // Test initial state
    const initialConfig = await configManager.get();
    assertEquals(initialConfig.workingDir, "/default", "Initial config");

    // Test loading
    await configManager.load();
    const loadedConfig = await configManager.get();
    assertEquals(loadedConfig.workingDir, "/loaded", "Config loaded");

    // Test partial update
    await configManager.update({ workingDir: "/updated" });
    const updatedConfig = await configManager.get();
    assertEquals(updatedConfig.workingDir, "/updated", "Config updated");
    assertEquals(
      updatedConfig.promptBaseDir,
      "/loaded/prompts",
      "Other properties preserved"
    );

    // Test validation success
    await configManager.validate(); // Should not throw

    // Test validation failure
    await configManager.update({ workingDir: "" });
    await assertRejects(
      () => configManager.validate(),
      Error,
      "workingDir is required"
    );
  });

  await t.step("should handle edge cases in configuration updates", () => {
    logger.debug("Testing configuration edge cases");

    let config: WorkspaceConfig = {
      workingDir: "/base",
      promptBaseDir: "/base/prompts",
      schemaBaseDir: "/base/schemas",
    };

    const configManager: WorkspaceConfigManager = {
      load: () => {},
      get: async () => ({ ...config }),
      update: async (update: Partial<WorkspaceConfig>) => {
        config = { ...config, ...update };
      },
      validate: () => {},
    };

    // Test empty update
    await configManager.update({});
    const unchangedConfig = await configManager.get();
    assertEquals(unchangedConfig.workingDir, "/base", "Empty update preserves config");

    // Test multiple property update
    await configManager.update({
      workingDir: "/new",
      promptBaseDir: "/new/prompts",
    });
    const multiUpdatedConfig = await configManager.get();
    assertEquals(multiUpdatedConfig.workingDir, "/new", "Multiple updates applied");
    assertEquals(
      multiUpdatedConfig.promptBaseDir,
      "/new/prompts",
      "Multiple updates applied"
    );
    assertEquals(
      multiUpdatedConfig.schemaBaseDir,
      "/base/schemas",
      "Unchanged property preserved"
    );
  });
});

Deno.test.ignore("WorkspaceErrorHandler Practical Usage", async (t) => {
  const logger = new BreakdownLogger("unit-error-handler-test");

  await t.step("should handle different error types appropriately", () => {
    logger.debug("Testing error type handling");

    const handledErrors: Array<{ error: Error; type: string }> = [];
    const loggedErrors: Array<{ error: Error; context: Record<string, unknown> }> = [];

    const errorHandler: WorkspaceErrorHandler = {
      handleError: (error: Error, type: string): void => {
        handledErrors.push({ error, type });
        
        // Different handling based on type
        switch (type) {
          case "validation":
            // Log and continue
            break;
          case "fatal":
            // Would typically exit process
            break;
          case "recoverable":
            // Attempt recovery
            break;
        }
      },
      logError: (error: Error, context: Record<string, unknown>): void => {
        loggedErrors.push({ error, context });
      },
    };

    // Test different error types
    const validationError = new Error("Invalid configuration");
    const fatalError = new Error("Cannot access filesystem");
    const recoverableError = new Error("Temporary network issue");

    errorHandler.handleError(validationError, "validation");
    errorHandler.handleError(fatalError, "fatal");
    errorHandler.handleError(recoverableError, "recoverable");

    assertEquals(handledErrors.length, 3, "All errors handled");
    assertEquals(handledErrors[0].type, "validation", "Validation error recorded");
    assertEquals(handledErrors[1].type, "fatal", "Fatal error recorded");
    assertEquals(handledErrors[2].type, "recoverable", "Recoverable error recorded");

    // Test error logging with context
    errorHandler.logError(validationError, {
      operation: "config-validation",
      timestamp: Date.now(),
      userId: "test-user",
    });

    assertEquals(loggedErrors.length, 1, "Error logged with context");
    assertEquals(
      loggedErrors[0].context.operation,
      "config-validation",
      "Context preserved"
    );
  });

  await t.step("should handle complex error scenarios", () => {
    logger.debug("Testing complex error handling scenarios");

    const errorStats = {
      handled: 0,
      logged: 0,
      byType: {} as Record<string, number>,
    };

    const errorHandler: WorkspaceErrorHandler = {
      handleError: (error: Error, type: string): void => {
        errorStats.handled++;
        errorStats.byType[type] = (errorStats.byType[type] || 0) + 1;
      },
      logError: (error: Error, context: Record<string, unknown>): void => {
        errorStats.logged++;
      },
    };

    // Simulate multiple errors of same type
    for (let i = 0; i < 5; i++) {
      errorHandler.handleError(new Error(`Error ${i}`), "network");
    }

    // Simulate different error types
    errorHandler.handleError(new Error("Validation failed"), "validation");
    errorHandler.handleError(new Error("File not found"), "filesystem");

    assertEquals(errorStats.handled, 7, "All errors counted");
    assertEquals(errorStats.byType.network, 5, "Network errors grouped");
    assertEquals(errorStats.byType.validation, 1, "Validation errors counted");
    assertEquals(errorStats.byType.filesystem, 1, "Filesystem errors counted");
  });
});

Deno.test.ignore("WorkspaceEventEmitter Behavior Verification", async (t) => {
  const logger = new BreakdownLogger("unit-event-emitter-test");

  await t.step("should manage event subscriptions and emissions correctly", () => {
    logger.debug("Testing event subscription and emission");

    const eventLog: Array<{ event: string; data: unknown }> = [];
    const listeners = new Map<string, Array<(data: unknown) => void>>();

    const eventEmitter: WorkspaceEventEmitter = {
      on: (event: string, listener: (data: unknown) => void): void => {
        if (!listeners.has(event)) {
          listeners.set(event, []);
        }
        listeners.get(event)!.push(listener);
      },
      emit: (event: string, data: unknown): void => {
        eventLog.push({ event, data });
        const eventListeners = listeners.get(event) || [];
        eventListeners.forEach((listener) => listener(data));
      },
    };

    // Track received events
    const receivedEvents: Array<{ event: string; data: unknown }> = [];

    // Register listeners
    eventEmitter.on("test", (data) => {
      receivedEvents.push({ event: "test", data });
    });

    eventEmitter.on("config-changed", (data) => {
      receivedEvents.push({ event: "config-changed", data });
    });

    // Emit events
    eventEmitter.emit("test", "test data");
    eventEmitter.emit("config-changed", { workingDir: "/new" });
    eventEmitter.emit("unsubscribed", "no listeners");

    assertEquals(eventLog.length, 3, "All emissions logged");
    assertEquals(receivedEvents.length, 2, "Only subscribed events received");
    assertEquals(receivedEvents[0].data, "test data", "Test event data received");
  });

  await t.step("should handle multiple listeners for same event", () => {
    logger.debug("Testing multiple listeners per event");

    const callCounts = { listener1: 0, listener2: 0, listener3: 0 };
    const listeners = new Map<string, Array<(data: unknown) => void>>();

    const eventEmitter: WorkspaceEventEmitter = {
      on: (event: string, listener: (data: unknown) => void): void => {
        if (!listeners.has(event)) {
          listeners.set(event, []);
        }
        listeners.get(event)!.push(listener);
      },
      emit: (event: string, data: unknown): void => {
        const eventListeners = listeners.get(event) || [];
        eventListeners.forEach((listener) => listener(data));
      },
    };

    // Register multiple listeners for same event
    eventEmitter.on("multi", () => callCounts.listener1++);
    eventEmitter.on("multi", () => callCounts.listener2++);
    eventEmitter.on("multi", () => callCounts.listener3++);

    // Emit event multiple times
    eventEmitter.emit("multi", null);
    eventEmitter.emit("multi", null);

    assertEquals(callCounts.listener1, 2, "Listener1 called for each emission");
    assertEquals(callCounts.listener2, 2, "Listener2 called for each emission");
    assertEquals(callCounts.listener3, 2, "Listener3 called for each emission");
  });

  await t.step("should handle various data types in events", () => {
    logger.debug("Testing event data type flexibility");

    const receivedData: unknown[] = [];
    const listeners = new Map<string, Array<(data: unknown) => void>>();

    const eventEmitter: WorkspaceEventEmitter = {
      on: (event: string, listener: (data: unknown) => void): void => {
        if (!listeners.has(event)) {
          listeners.set(event, []);
        }
        listeners.get(event)!.push(listener);
      },
      emit: (event: string, data: unknown): void => {
        const eventListeners = listeners.get(event) || [];
        eventListeners.forEach((listener) => listener(data));
      },
    };

    eventEmitter.on("data-test", (data) => {
      receivedData.push(data);
    });

    // Emit various data types
    eventEmitter.emit("data-test", "string");
    eventEmitter.emit("data-test", 123);
    eventEmitter.emit("data-test", { object: "value" });
    eventEmitter.emit("data-test", [1, 2, 3]);
    eventEmitter.emit("data-test", null);
    eventEmitter.emit("data-test", undefined);

    assertEquals(receivedData.length, 6, "All data types received");
    assertEquals(receivedData[0], "string", "String data preserved");
    assertEquals(receivedData[1], 123, "Number data preserved");
    assertEquals(receivedData[4], null, "Null data preserved");
    assertEquals(receivedData[5], undefined, "Undefined data preserved");
  });
});

Deno.test.ignore("Integration Usage Patterns", async (t) => {
  const logger = new BreakdownLogger("unit-integration-test");

  await t.step("should demonstrate realistic workspace usage flow", () => {
    logger.debug("Testing realistic workspace usage patterns");

    // Mock implementations for integration testing
    const mockConfig: WorkspaceConfig = {
      workingDir: "/workspace",
      promptBaseDir: "/workspace/prompts",
      schemaBaseDir: "/workspace/schemas",
    };

    const mockDirectories = new Set(["/workspace"]);
    
    const workspace: Workspace = {
      initialize: async (): Promise<void> => {
        mockDirectories.add("/workspace/prompts");
        mockDirectories.add("/workspace/schemas");
      },
      resolvePath: async (path: string): Promise<string> => {
        return `/workspace/${path}`;
      },
      createDirectory: async (path: string): Promise<void> => {
        mockDirectories.add(path);
      },
      removeDirectory: async (path: string): Promise<void> => {
        mockDirectories.delete(path);
      },
      exists: async (path?: string): Promise<boolean> => {
        return mockDirectories.has(path || "/workspace");
      },
      getPromptBaseDir: async (): Promise<string> => {
        return mockConfig.promptBaseDir;
      },
      getSchemaBaseDir: async (): Promise<string> => {
        return mockConfig.schemaBaseDir;
      },
      getWorkingDir: async (): Promise<string> => {
        return mockConfig.workingDir;
      },
      validateConfig: async (): Promise<void> => {
        if (!mockConfig.workingDir) throw new Error("Invalid config");
      },
      reloadConfig: async (): Promise<void> => {
        // Simulate config reload
      },
    };

    // Realistic usage flow
    await workspace.initialize();
    assertEquals(await workspace.exists(), true, "Workspace initialized");

    const projectPath = await workspace.resolvePath("projects/myapp");
    assertEquals(projectPath, "/workspace/projects/myapp", "Path resolved");

    await workspace.createDirectory(projectPath);
    assertEquals(await workspace.exists(projectPath), true, "Project directory created");

    const promptDir = await workspace.getPromptBaseDir();
    assertEquals(promptDir, "/workspace/prompts", "Prompt directory accessible");

    await workspace.validateConfig();
    // Should not throw
  });

  await t.step("should handle error propagation correctly", () => {
    logger.debug("Testing error propagation in workspace operations");

    const errorWorkspace: Workspace = {
      initialize: async (): Promise<void> => {
        throw new Error("Initialization failed");
      },
      resolvePath: async (path: string): Promise<string> => {
        if (path === "invalid") throw new Error("Cannot resolve path");
        return path;
      },
      createDirectory: async (path: string): Promise<void> => {
        if (path.includes("forbidden")) {
          throw new Error("Permission denied");
        }
      },
      removeDirectory: async (path: string): Promise<void> => {
        if (!path) throw new Error("Path required");
      },
      exists: async (path?: string): Promise<boolean> => {
        if (path === "error") throw new Error("Access denied");
        return false;
      },
      getPromptBaseDir: async (): Promise<string> => {
        throw new Error("Config not loaded");
      },
      getSchemaBaseDir: async (): Promise<string> => {
        throw new Error("Config not loaded");
      },
      getWorkingDir: async (): Promise<string> => {
        throw new Error("Config not loaded");
      },
      validateConfig: async (): Promise<void> => {
        throw new Error("Invalid configuration");
      },
      reloadConfig: async (): Promise<void> => {
        throw new Error("Config file not found");
      },
    };

    // Test error propagation
    await assertRejects(
      () => errorWorkspace.initialize(),
      Error,
      "Initialization failed"
    );

    await assertRejects(
      () => errorWorkspace.resolvePath("invalid"),
      Error,
      "Cannot resolve path"
    );

    await assertRejects(
      () => errorWorkspace.createDirectory("forbidden/path"),
      Error,
      "Permission denied"
    );

    await assertRejects(
      () => errorWorkspace.exists("error"),
      Error,
      "Access denied"
    );

    await assertRejects(
      () => errorWorkspace.validateConfig(),
      Error,
      "Invalid configuration"
    );
  });
});