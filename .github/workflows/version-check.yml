name: Version Consistency Check

on:
  push:
    branches: 
      - 'release/**'
      - 'release-*'
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - 'release/**'
      - 'release-*'

jobs:
  version-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v2.x

      - name: Get latest tag version
        id: get_tag
        run: |
          TAG_VERSION=$(git describe --tags --abbrev=0 | sed 's/^v//')
          echo "TAG_VERSION=$TAG_VERSION" >> $GITHUB_ENV

      - name: Check deno.json version matches latest tag
        run: |
          deno run --allow-read --allow-env - <<'EOF'
          const denoJson = JSON.parse(await Deno.readTextFile("deno.json"));
          let denoVersion = denoJson.version;
          let tagVersion = Deno.env.get("TAG_VERSION");
          // Remove leading "v" if present in either version string
          denoVersion = denoVersion.replace(/^v/, "");
          tagVersion = tagVersion.replace(/^v/, "");
          if (denoVersion !== tagVersion) {
            console.error(`Version mismatch!\n deno.json: ${denoVersion}\n git tag: ${tagVersion}`);
            Deno.exit(1);
          } else {
            console.log(`deno.json and git tag version match: ${denoVersion}`);
          }
          EOF

      - name: Check lib/version.ts VERSION matches deno.json and tag
        run: |
          deno run --allow-read --allow-env - <<'EOF'
          const denoJson = JSON.parse(await Deno.readTextFile("deno.json"));
          const denoVersion = denoJson.version.replace(/^v/, "");
          const tagVersion = Deno.env.get("TAG_VERSION").replace(/^v/, "");
          const versionTs = await Deno.readTextFile("lib/version.ts");
          const match = versionTs.match(/export const VERSION = \"([^\"]+)\"/);
          if (!match) {
            console.error("VERSION constant not found in lib/version.ts");
            Deno.exit(1);
          }
          const versionConst = match[1].replace(/^v/, "");
          if (denoVersion !== versionConst || tagVersion !== versionConst) {
            console.error(`Version mismatch!\n deno.json: ${denoVersion}\n lib/version.ts: ${versionConst}\n git tag: ${tagVersion}`);
            Deno.exit(1);
          } else {
            console.log(`All versions match: ${denoVersion}`);
          }
          EOF
