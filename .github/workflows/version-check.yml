name: Version Consistency Check

on:
  push:
    branches:
      - "release/**"
      - "release-*"

jobs:
  version-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v2.x

      - name: Extract version from branch name
        id: branch-version
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          echo "Branch name: $BRANCH_NAME"

          # Extract version from release/v1.5.0 or release-1.5.0 pattern
          if [[ "$BRANCH_NAME" =~ release[/-]v?([0-9]+\.[0-9]+\.[0-9]+) ]]; then
            BRANCH_VERSION="${BASH_REMATCH[1]}"
            echo "branch_version=$BRANCH_VERSION" >> $GITHUB_OUTPUT
            echo "‚úÖ Extracted version from branch: $BRANCH_VERSION"
          else
            echo "‚ùå Error: Could not extract version from branch name: $BRANCH_NAME"
            echo "Branch name should be like 'release/v1.5.0', 'release/1.5.0', 'release-v1.5.0', or 'release-1.5.0'"
            exit 1
          fi

      - name: Check deno.json version matches branch
        run: |
          BRANCH_VERSION="${{ steps.branch-version.outputs.branch_version }}"
          DENO_VERSION=$(jq -r '.version' deno.json)

          # Remove leading "v" if present in deno.json version
          DENO_VERSION=$(echo "$DENO_VERSION" | sed 's/^v//')

          echo "Branch version: $BRANCH_VERSION"
          echo "deno.json version: $DENO_VERSION"

          if [[ "$DENO_VERSION" != "$BRANCH_VERSION" ]]; then
            echo "‚ùå Version mismatch!"
            echo "   Branch expects: $BRANCH_VERSION"
            echo "   deno.json has: $DENO_VERSION"
            echo ""
            echo "Please update deno.json version to match the release branch."
            exit 1
          else
            echo "‚úÖ deno.json version matches branch version: $DENO_VERSION"
          fi

      - name: Check lib/version.ts VERSION matches branch
        run: |
          BRANCH_VERSION="${{ steps.branch-version.outputs.branch_version }}"

          if [[ ! -f "lib/version.ts" ]]; then
            echo "‚ö†Ô∏è lib/version.ts not found, skipping version.ts check"
            exit 0
          fi

          VERSION_TS_CONTENT=$(cat lib/version.ts)
          # Extract version using grep and sed for more reliable parsing
          VERSION_TS_VERSION=$(grep 'export const VERSION' lib/version.ts | sed -E 's/.*"([^"]+)".*/\1/')

          if [[ -n "$VERSION_TS_VERSION" ]]; then
            # Remove leading "v" if present
            VERSION_TS_VERSION=$(echo "$VERSION_TS_VERSION" | sed 's/^v//')

            echo "Branch version: $BRANCH_VERSION"
            echo "lib/version.ts VERSION: $VERSION_TS_VERSION"

            if [[ "$VERSION_TS_VERSION" != "$BRANCH_VERSION" ]]; then
              echo "‚ùå Version mismatch!"
              echo "   Branch expects: $BRANCH_VERSION"
              echo "   lib/version.ts has: $VERSION_TS_VERSION"
              echo ""
              echo "Please update lib/version.ts VERSION constant to match the release branch."
              exit 1
            else
              echo "‚úÖ lib/version.ts VERSION matches branch version: $VERSION_TS_VERSION"
            fi
          else
            echo "‚ùå Error: VERSION constant not found in lib/version.ts"
            echo "Expected format: export const VERSION = \"1.5.0\";"
            exit 1
          fi

      - name: Summary
        run: |
          BRANCH_VERSION="${{ steps.branch-version.outputs.branch_version }}"
          echo "üéâ All version checks passed!"
          echo "‚úÖ Branch, deno.json, and lib/version.ts all specify version: $BRANCH_VERSION"
          echo ""
          echo "This release branch is ready to be merged to main."
